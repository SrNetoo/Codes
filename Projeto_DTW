int m=1500;
	int n=1500;
	int aux=-1;
	
	double MatrizA[1500][1500];




int comparando(int q, int s, int w){
	
	for(int l=0; l<12 ; l++){
	vetorkvalores=0;
	}

	//calculo da moda
	for(int i=0;i<q;i++){

		for(int j=1; j<=12;j++){

			if(kmovimento[s][i]==j){

				vetorkvalores[j]++;
			}

		}
	}


	int indice=0;
	int max=0;


	for(int i=1;i<=12;i++){

		if(vetorkvalores[i]>max){
			max=vetorkvalores[i];
			indice=i;
		}
	}

	for(int i=1;i<=12;i++){

		if(vetorkvalores[i]==max){
			comparando(k+1);
			return 0;

		}

	}

	if(indice== MatrizA[w][0]){
		acertos++;
		return 0;
	}
	else{
		erros++;
		return 0;
	}



}



double ordenar_classificar(){

	//ORDENANDO
	int u=0;
	int t=0;
	int n=0;
	int p=0;
	int aux1=0;
	int aux2=0;
	int kvalor=1 // k valores, assumindo 1 / 2 / 3 / 5 / 10 / 20

	while(k[u][t]=! -1){ // aqui vai ser sempre zero, le todo o arquivo

		while(k[u][t]=! -1){ //contando o tamanho da linha
			n++; //tamanho da linha
			t++; //passa pra próxima coluna ateh acabar a linha k== -1
		}

		for(int i=n;i<0;i++){

			if(k[u][i]>k[u][i+1]){

				aux=k[u][i];
				k[u][i]=k[u][i+1];
				k[u][i+1]=aux;

				aux2=kmovimento[u][i];
				kmovimento[u][i]=kmovimento[u][i+1];
				kmovimento[u][i+1]=aux2;
			}
		}

		n=0; // volta pra cond inicial
		t=0; //volta pra cond inicial
		u++ //passa pra proxima linha,prox vetor

	}

	//agora tenho todos meus k vetores ordenados
	//COMPARANDO
	while(p<u-1){
		comparando(kvalor,p,u-1);
		p++
	}

	double taxafinal = acertos/(u-1);

	return taxafinal;


}


int inteiro_teste(double a){
	int x;
	double n;
	n=(int)a;

	if (n==a){
		x=1;
	}
	else{
		x=0;
	}
	return x; //ok

}


int custolocal(int a, int b, int x, int y){
	double custo;

	if(MatrizA[x][a]>MatrizB[y][b]){                 // pra nao precisar de raiz quadrada eu vejo quem eh o maior antes de achar a diferença pra ela ja sair em modulo
		custo= MatrizA[x][a] - MatrizB[y][b];      // ao inves d vetores eu coloco as linhas das matrizes formadas pelos dados dos arquivos
	}
	else{
		custo=MatrizB[y][b] - MatrizA[x][a];
	}
	
}

double minimo(double a, double b, double c){
	int min;
	if (a<b){
	if(b<c){
		min=a;
	}
	else{
		if(a<c){
			min=a;
			}
			else{
				min=c;
				return min;
				}
			}
		}
	

	else{
		if(a<c){
			min=b;
		}
			else{
				if(b<c){
					min=b;
				}
						else{
							min=c;
							return min;
						}
			}

	}

	return min;

}

void dtw(double MatrizA[][], double MatrizB[][], double DTW[][]){ // Vetor A = i posiçoes, vetor a ser analisado. Vetor B = j posiçoes, vetor exemplo para comparaçao
	int x = 0;
		int y = 0;
		while(MatrizA[x][0] =! -1){ // isso eh pra ele ir descendo nas linhas da matriz, ou seja ir passando de vetor e ele para quando o primeiro valor for zero, pq antes d preencher a matriz vou zerar ela
    	
    	while(MatrizB[y][0] =! -1){

			for(int a=1; inteiro_teste( MatrizA[x][a]) == 0; a++){ //a e b == 1 pq os valores da posicao 0 sao as classificacoes dos movimentos

				for(int b=1; inteiro_teste( MatrizB[y][a]) == 0; b++){
					int c = custolocal(a,b,x,y);
						if(a!=1 && b!=1){
						DTW[a][b]= c + minimo(DTW[a-1][b-1],DTW[a-1][b], DTW[a][b-1]);
					}

					if(a==1 && b!=1){       // nesse caso nao tem valores para a-1 , entao nem preciso comparalos
						DTW[a][b]= c + DTW[a][b-1];

					}

					if(a!=1 && b==1 ){
						DTW[a][b]= c + DTW[a-1][b]; // nesse caso nao tem valores para b-1, enta nao preciso comparalos
					}
		  
					if(a==1 && b==1){   // nesse caso noa tem valores nem pra a-1 nem pra b-1 entao o valor e o proprio c
						DTW[a][b]= c ;
					}

				}
			}
		 
			k[x][y] = DTW[a][b]; // guardo o ultimo valor da matriz numa matriz que guarda todos os k
			kmovimento[x][y] = MatrizB[y][0];  //guardo o valor da classificaçao do movimento

			y++; //Aqui eu mudo a linha do vetor B q sao meus exemplos
		}

		x++; //Aqui eu mudo a linha do vetor A q é o vetor a ser analisado
	}
} 



	void LerTeste (){


		for(int i=0; i<m ; i++){        // 'zero' a matriz dando pra ela o valor de -1
			for(int j=0; j<n ; j++ ){
				MatrizA[i][j]=-1; 
			}
		}
		

		FILE *arq;

		arq = fopen("/home/neto/N/USP/Codigos_Alg/Projeto_2018/base de dados/teste.txt", "r");
		int f=0;
		int g=0;
		// MANEIRA 2 acho q vai ser essa
		while (!feof(arq)){ // talvez tenha q ser um for(for m<nmero maximo de linhas) aqui, n sei se ele le o arquivo sempre q volta aqui, ou se ele le tudo de uma vez 
		
			fscanf(arq, "%lf", &MatrizA[f][g]);
			if(f != 0 || g != 0){
				if(MatrizA[f][0]<=2){
				if (inteiro_teste(MatrizA[f][g]) == 1){ // se o nmero for inteiro ele ja vai estar no fim da linha m, oq ta errado pq ele tem q estar no comeco do vetor, ja que inteiro significa novo vetor
					aux = MatrizA[f][g]; // guardo esse valor inteiro colocado errado
					MatrizA[f][g] = -1; // zero o valor nessa posiçao
					f++; // arrumo a linha
					g=0; // arrumo a coluna
					MatrizA[f][g] = aux; // ponho o valor no lugar certo
				}
			}
			else{

				if (inteiro_teste(MatrizA[f][g]) == 1 && MatrizA[f][g]>2){ // se o nmero for inteiro ele ja vai estar no fim da linha m, oq ta errado pq ele tem q estar no comeco do vetor, ja que inteiro significa novo vetor
					aux = MatrizA[f][g]; // guardo esse valor inteiro colocado errado
					MatrizA[f][g] = -1; // zero o valor nessa posiçao
					f++; // arrumo a linha
					g=0; // arrumo a coluna
					MatrizA[f][g] = aux; // ponho o valor no lugar certo
				}

			}
			}
		      
				g++;
			
		
			}	

			fclose(arq);

			

	}


	void LerTreino (){


		for(int i=0; i<m ; i++){        // 'zero' a matriz dando pra ela o valor de -1
			for(int j=0; j<n ; j++ ){
				MatrizA[i][j]=-1; 
			}
		}
		

		FILE *arq;

		arq = fopen("/home/neto/N/USP/Codigos_Alg/Projeto_2018/base de dados/treino.txt", "r");
		int f=0;
		int g=0;
		// MANEIRA 2 acho q vai ser essa
		while (!feof(arq)){ // talvez tenha q ser um for(for m<nmero maximo de linhas) aqui, n sei se ele le o arquivo sempre q volta aqui, ou se ele le tudo de uma vez 
		
			fscanf(arq, "%lf", &MatrizA[f][g]);
			if(f != 0 || g != 0){
				if(MatrizA[f][0]<=2){
				if (inteiro_teste(MatrizA[f][g]) == 1){ // se o nmero for inteiro ele ja vai estar no fim da linha m, oq ta errado pq ele tem q estar no comeco do vetor, ja que inteiro significa novo vetor
					aux = MatrizA[f][g]; // guardo esse valor inteiro colocado errado
					MatrizA[f][g] = -1; // zero o valor nessa posiçao
					f++; // arrumo a linha
					g=0; // arrumo a coluna
					MatrizA[f][g] = aux; // ponho o valor no lugar certo
				}
			}
			else{

				if (inteiro_teste(MatrizA[f][g]) == 1 && MatrizA[f][g]>2){ // se o nmero for inteiro ele ja vai estar no fim da linha m, oq ta errado pq ele tem q estar no comeco do vetor, ja que inteiro significa novo vetor
					aux = MatrizA[f][g]; // guardo esse valor inteiro colocado errado
					MatrizA[f][g] = -1; // zero o valor nessa posiçao
					f++; // arrumo a linha
					g=0; // arrumo a coluna
					MatrizA[f][g] = aux; // ponho o valor no lugar certo
				}

			}
			}
		      
				g++;
			
		
			}	

			fclose(arq);

			

	}

